<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.twogether.local7.review.dao.ReviewDAO">

    <resultMap id="reviewResultMap" type="com.twogether.local7.review.vo.ReviewVO">
        <id property="reviewId" column="REVIEW_ID"/>
        <result property="userId" column="USER_ID"/>
        <result property="restaurantId" column="RESTAURANT_ID"/>
        <result property="reviewRating" column="REVIEW_RATING"/>
        <result property="reviewContent" column="REVIEW_CONTENT"/>
        <result property="aiSummary" column="AI_SUMMARY"/>
        <result property="aiKeywords" column="AI_KEYWORDS"/>
        <result property="createdDate" column="CREATED_DATE"/>
        <result property="createdId" column="CREATED_ID"/>
        <result property="updatedDate" column="UPDATED_DATE"/>
        <result property="updatedId" column="UPDATED_ID"/>
        <result property="userNickname" column="USER_NICKNAME"/>
    </resultMap>

    <insert id="insertReview" parameterType="com.twogether.local7.review.vo.ReviewVO" useGeneratedKeys="true" keyProperty="reviewId">
        <selectKey keyProperty="reviewId" resultType="long" order="BEFORE">
            SELECT SEQ_TB_REVIEW.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO TB_REVIEW (
            REVIEW_ID,
            USER_ID,
            RESTAURANT_ID,
            REVIEW_RATING,
            REVIEW_CONTENT,
            AI_SUMMARY,
            AI_KEYWORDS,
            CREATED_DATE,
            CREATED_ID
        ) VALUES (
            #{reviewId},
            #{userId},
            #{restaurantId},
            #{reviewRating},
            #{reviewContent},
            <!-- AI_SUMMARY에 null이 올 경우를 대비하여 jdbcType=CLOB 명시 -->
            #{aiSummary, jdbcType=CLOB},
            <!-- AI_KEYWORDS에 null이 올 경우를 대비하여 jdbcType=VARCHAR 명시 -->
            #{aiKeywords, jdbcType=VARCHAR},
            SYSTIMESTAMP,
            #{createdId}
        )
    </insert>

    <select id="findReviewsByRestaurantId" parameterType="long" resultMap="reviewResultMap">
        SELECT
            TR.REVIEW_ID,
            TR.USER_ID,
            TR.RESTAURANT_ID,
            TR.REVIEW_RATING,
            TR.REVIEW_CONTENT,
            TR.AI_SUMMARY,
            TR.AI_KEYWORDS,
            TR.CREATED_DATE,
            TR.CREATED_ID,
            TR.UPDATED_DATE,
            TR.UPDATED_ID,
            TU.USER_NICKNAME
        FROM TB_REVIEW TR
        JOIN TB_USER TU ON TR.USER_ID = TU.USER_ID
        WHERE TR.RESTAURANT_ID = #{restaurantId}
        ORDER BY TR.CREATED_DATE DESC
    </select>

    <select id="findReviewsByUserId" parameterType="long" resultMap="reviewResultMap">
        SELECT
            TR.REVIEW_ID,
            TR.USER_ID,
            TR.RESTAURANT_ID,
            TR.REVIEW_RATING,
            TR.REVIEW_CONTENT,
            TR.AI_SUMMARY,
            TR.AI_KEYWORDS,
            TR.CREATED_DATE,
            TR.CREATED_ID,
            TR.UPDATED_DATE,
            TR.UPDATED_ID,
            TU.USER_NICKNAME
        FROM TB_REVIEW TR
        JOIN TB_USER TU ON TR.USER_ID = TU.USER_ID
        WHERE TR.USER_ID = #{userId}
        ORDER BY TR.CREATED_DATE DESC
    </select>

    <update id="updateReview" parameterType="com.twogether.local7.review.vo.ReviewVO">
        UPDATE TB_REVIEW
        SET
            REVIEW_RATING = #{reviewRating},
            REVIEW_CONTENT = #{reviewContent},
            <!-- AI_SUMMARY에 null이 올 경우를 대비하여 jdbcType=CLOB 명시 -->
            AI_SUMMARY = #{aiSummary, jdbcType=CLOB},
            <!-- AI_KEYWORDS에 null이 올 경우를 대비하여 jdbcType=VARCHAR 명시 -->
            AI_KEYWORDS = #{aiKeywords, jdbcType=VARCHAR},
            UPDATED_DATE = SYSTIMESTAMP,
            UPDATED_ID = #{updatedId}
        WHERE REVIEW_ID = #{reviewId}
    </update>

    <delete id="deleteReview" parameterType="long">
        DELETE FROM TB_REVIEW
        WHERE REVIEW_ID = #{reviewId}
    </delete>

</mapper>
