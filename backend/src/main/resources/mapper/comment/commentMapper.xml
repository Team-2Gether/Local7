<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.twogether.local7.comment.dao.CommentDAO">

    <resultMap id="commentResultMap" type="com.twogether.local7.comment.vo.CommentVO">
        <id property="commentId" column="COMMENT_ID"/>
        <result property="postId" column="POST_ID"/>
        <result property="userId" column="USER_ID"/>
        <result property="content" column="CONTENT"/>
        <result property="createdDate" column="CREATED_DATE"/>
        <result property="updatedDate" column="UPDATED_DATE"/>
        <result property="userNickname" column="USER_NICKNAME"/>
        <result property="userProfImgUrl" column="USER_PROF_IMG_URL"/>
        <result property="loginId" column="LOGIN_ID"/> <result property="likeCount" column="LIKE_COUNT"/>
        <result property="likedByCurrentUser" column="LIKED_BY_CURRENT_USER" javaType="boolean"/>
    </resultMap>

    <select id="selectCommentList" resultMap="commentResultMap">
        SELECT
        A.COMMENT_ID,
        A.POST_ID,
        A.USER_ID,
        A.CONTENT,
        A.CREATED_DATE,
        A.UPDATED_DATE,
        A.LIKE_COUNT,
        B.USER_NICKNAME,
        B.USER_PROF_IMG_URL,
        B.LOGIN_ID, CASE WHEN TBL.USER_ID IS NOT NULL THEN 1 ELSE 0 END AS LIKED_BY_CURRENT_USER
        FROM
        TB_COMMENT A
        JOIN
        TB_USER B ON A.USER_ID = B.USER_ID
        LEFT JOIN
        TB_COMMENT_LIKE TBL ON A.COMMENT_ID = TBL.COMMENT_ID AND TBL.USER_ID = #{currentUserId, jdbcType=NUMERIC}
        WHERE A.POST_ID = #{postId}
        <choose>
            <when test="sortOrder == 'likes'">
                ORDER BY A.LIKE_COUNT DESC, A.CREATED_DATE DESC
            </when>
            <otherwise> ORDER BY A.CREATED_DATE DESC
            </otherwise>
        </choose>
    </select>

    <insert id="insertComment" parameterType="com.twogether.local7.comment.vo.CommentVO">
        <selectKey keyProperty="commentId" resultType="long" order="BEFORE">
            SELECT SEQ_TB_COMMENT.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO TB_COMMENT (
        COMMENT_ID,
        POST_ID,
        USER_ID,
        CONTENT,
        LIKE_COUNT
        ) VALUES (
        #{commentId},
        #{postId},
        #{userId},
        #{content},
        0
        )
    </insert>

    <update id="updateComment" parameterType="com.twogether.local7.comment.vo.CommentVO">
        UPDATE TB_COMMENT
        SET
        CONTENT = #{content},
        UPDATED_DATE = SYSTIMESTAMP
        WHERE COMMENT_ID = #{commentId}
    </update>

    <delete id="deleteComment" parameterType="long" flushCache="true">
        DELETE FROM TB_COMMENT
        WHERE COMMENT_ID = #{commentId}
    </delete>

    <select id="selectComment" parameterType="long" resultMap="commentResultMap">
        SELECT
        A.COMMENT_ID,
        A.POST_ID,
        A.USER_ID,
        A.CONTENT,
        A.CREATED_DATE,
        A.UPDATED_DATE,
        A.LIKE_COUNT,
        B.USER_NICKNAME,
        B.USER_PROF_IMG_URL,
        B.LOGIN_ID FROM TB_COMMENT A
        JOIN TB_USER B ON A.USER_ID = B.USER_ID
        WHERE A.COMMENT_ID = #{commentId}
    </select>

    <update id="incrementCommentCount">
        UPDATE TB_POST
        SET
        COMMENT_COUNT = COMMENT_COUNT + 1
        WHERE POST_ID = #{postId}
    </update>

    <update id="decrementCommentCount">
        UPDATE TB_POST
        SET COMMENT_COUNT = COMMENT_COUNT - 1
        WHERE POST_ID = #{postId}
    </update>

    <select id="checkCommentLike" resultType="boolean">
        SELECT COUNT(*)  FROM TB_COMMENT_LIKE
        WHERE COMMENT_ID = #{commentId} AND USER_ID = #{userId}
    </select>

    <insert id="insertCommentLike">
        <selectKey keyProperty="commentLikeId" resultType="long" order="BEFORE">
            SELECT SEQ_TB_COMMENT_LIKE.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO TB_COMMENT_LIKE (
        COMMENT_LIKE_ID,
        COMMENT_ID,
        USER_ID
        ) VALUES (
        #{commentLikeId},
        #{commentId},
        #{userId}
        )
    </insert>

    <delete id="deleteCommentLike">
        DELETE FROM TB_COMMENT_LIKE
        WHERE COMMENT_ID = #{commentId} AND USER_ID = #{userId}
    </delete>

    <update id="incrementCommentLikeCount">
        UPDATE TB_COMMENT
        SET
        LIKE_COUNT = LIKE_COUNT + 1
        WHERE COMMENT_ID = #{commentId}
    </update>

    <update id="decrementCommentLikeCount">
        UPDATE TB_COMMENT
        SET
        LIKE_COUNT = LIKE_COUNT - 1
        WHERE COMMENT_ID = #{commentId}
    </update>

    <delete id="deleteCommentLikesByCommentId">
        DELETE FROM TB_COMMENT_LIKE
        WHERE COMMENT_ID = #{commentId}
    </delete>

</mapper>