<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.twogether.local7.admin.dao.AdminDAO">

    <resultMap id="userMap" type="com.twogether.local7.user.vo.UserVO">
        <id property="userId" column="USER_ID" />
        <result property="ruleId" column="RULE_ID" />
        <result property="userLoginId" column="LOGIN_ID" />
        <result property="userName" column="USER_NAME" />
        <result property="userPassword" column="USER_PASSWORD" />
        <result property="userEmail" column="USER_EMAIL" />
        <result property="userNickname" column="USER_NICKNAME" />
        <result property="userProfileImageUrl" column="USER_PROF_IMG_URL" />
        <result property="userBio" column="USER_BIO" />
        <result property="createDate" column="CREATE_DATE" />
        <result property="createdId" column="CREATED_ID" />
        <result property="updatedDate" column="UPDATED_DATE" />
        <result property="updatedId" column="UPDATED_ID" />
    </resultMap>

    <resultMap id="postMap" type="com.twogether.local7.post.vo.PostVO">
        <id property="postId" column="POST_ID" />
        <result property="userId" column="USER_ID" />
        <result property="restaurantId" column="RESTAURANT_ID" />
        <result property="postTitle" column="POST_TITLE" />
        <result property="postContent" column="POST_CONTENT" />
        <result property="locationTag" column="LOCATION_TAG" />
        <result property="createdDate" column="CREATED_DATE" />
        <result property="createdId" column="CREATED_ID" />
        <result property="updatedDate" column="UPDATED_DATE" />
        <result property="updatedId" column="UPDATED_ID" />
        <result property="commentCount" column="COMMENT_COUNT" />
        <result property="userNickname" column="USER_NICKNAME" />
    </resultMap>

    <resultMap id="commentMap" type="com.twogether.local7.comment.vo.CommentVO">
        <id property="commentId" column="COMMENT_ID" />
        <result property="postId" column="POST_ID" />
        <result property="userId" column="USER_ID" />
        <result property="content" column="CONTENT" />
        <result property="createdDate" column="CREATED_DATE" />
        <result property="createdId" column="CREATED_ID" />
        <result property="updatedDate" column="UPDATED_DATE" />
        <result property="updatedId" column="UPDATED_ID" />
        <result property="likeCount" column="LIKE_COUNT" />
        <result property="userNickname" column="USER_NICKNAME" />
    </resultMap>

    <resultMap id="reviewMap" type="com.twogether.local7.review.vo.ReviewVO">
        <id property="reviewId" column="REVIEW_ID" />
        <result property="userId" column="USER_ID" />
        <result property="restaurantId" column="RESTAURANT_ID" />
        <result property="reviewRating" column="REVIEW_RATING" />
        <result property="reviewContent" column="REVIEW_CONTENT" />
        <result property="createdDate" column="CREATED_DATE" />
        <result property="createdId" column="CREATED_ID" />
        <result property="updatedDate" column="UPDATED_DATE" />
        <result property="updatedId" column="UPDATED_ID" />
        <result property="userNickname" column="USER_NICKNAME" />
    </resultMap>

    <resultMap id="reportMap" type="com.twogether.local7.report.vo.ReportVO">
        <id property="reportId" column="REPORT_ID" />
        <result property="reporterId" column="REPORTER_ID" />
        <result property="targetId" column="TARGET_ID" />
        <result property="reportType" column="REPORT_TYPE" />
        <result property="reportReason" column="REPORT_REASON" />
        <result property="status" column="STATUS" />
        <result property="createdDate" column="CREATED_DATE" />
        <result property="createdId" column="CREATED_ID" />
        <result property="updatedDate" column="UPDATED_DATE" />
        <result property="updatedId" column="UPDATED_ID" />
        <result property="reporterNickname" column="REPORTER_NICKNAME" />
        <result property="postTitle" column="POST_TITLE" />
        <result property="commentContent" column="COMMENT_CONTENT" />
        <result property="targetNickname" column="TARGET_USER_NICKNAME" />
        <result property="targetUserId" column="TARGET_USER_ID" />
        <result property="reviewContent" column="REVIEW_CONTENT" />
    </resultMap>

    <resultMap id="restaurantMap" type="com.twogether.local7.restaurant.vo.RestaurantVO">
        <id property="restaurantId" column="RESTAURANT_ID"/>
        <result property="restaurantName" column="RESTAURANT_NAME"/>
        <result property="addrSido" column="ADDR_SIDO"/>
        <result property="addrSigungu" column="ADDR_SIGUNGU"/>
        <result property="addrDong" column="ADDR_DONG"/>
        <result property="addrDetail" column="ADDR_DETAIL"/>
        <result property="phoneNumber" column="PHONE_NUMBER"/>
        <result property="restaurantCategory" column="RESTAURANT_CATEGORY"/>
        <result property="restaurantLat" column="RESTAURANT_LAT"/>
        <result property="restaurantLon" column="RESTAURANT_LON"/>
        <result property="openHour" column="OPEN_HOUR"/>
        <result property="openMinute" column="OPEN_MINUTE"/>
        <result property="closeHour" column="CLOSE_HOUR"/>
        <result property="closeMinute" column="CLOSE_MINUTE"/>
        <result property="breakStartHour" column="BREAK_START_HOUR"/>
        <result property="breakStartMinute" column="BREAK_START_MINUTE"/>
        <result property="breakEndHour" column="BREAK_END_HOUR"/>
        <result property="breakEndMinute" column="BREAK_END_MINUTE"/>
        <result property="restaurantHoliday" column="RESTAURANT_HOLIDAY"/>
        <result property="parkingInfo" column="PARKING_INFO"/>
        <result property="createdDate" column="CREATED_DATE"/>
        <result property="createdId" column="CREATED_ID"/>
        <result property="updatedDate" column="UPDATED_DATE"/>
        <result property="updatedId" column="UPDATED_ID"/>
        <result property="averageRating" column="averageRating"/>
        <result property="totalComments" column="totalComments"/>
    </resultMap>

    <!-- 사용자 관련 -->
    <select id="selectAllUsers" resultMap="userMap">
        SELECT *
        FROM TB_USER
        ORDER BY USER_ID DESC
        OFFSET #{pageable.offset} ROWS FETCH NEXT #{pageable.pageSize} ROWS ONLY
    </select>

    <select id="countAllUsers" resultType="int">
        SELECT COUNT(*)
        FROM TB_USER
    </select>

    <delete id="deleteUser">
        DELETE FROM TB_USER
        WHERE USER_ID = #{userId}
    </delete>

    <!-- 사용자 ID로 사용자 정보 조회 (관리자 권한 확인용) -->
    <select id="findByUserId" parameterType="Long" resultMap="userMap">
        SELECT
        USER_ID,
        RULE_ID,
        LOGIN_ID,
        USER_NAME,
        USER_PASSWORD,
        USER_EMAIL,
        USER_NICKNAME,
        USER_PROF_IMG_URL,
        USER_BIO,
        HAS_VOTED,
        VOTED_REGION,
        CREATE_DATE,
        CREATED_ID,
        UPDATED_DATE,
        UPDATED_ID
        FROM TB_USER
        WHERE USER_ID = #{userId}
    </select>

    <!-- 게시글 관련 -->
    <select id="selectAllPosts" resultMap="postMap">
        SELECT
        p.*,
        u.USER_NICKNAME AS USER_NICKNAME
        FROM TB_POST p
        LEFT JOIN TB_USER u ON p.USER_ID = u.USER_ID
        ORDER BY p.POST_ID DESC
        OFFSET #{pageable.offset} ROWS FETCH NEXT #{pageable.pageSize} ROWS ONLY
    </select>

    <select id="countAllPosts" resultType="int">
        SELECT COUNT(*)
        FROM TB_POST
    </select>

    <!-- 관리자용 게시글 업데이트 (USER_ID 조건 없음) -->
    <update id="updatePost" parameterType="com.twogether.local7.post.vo.PostVO">
        UPDATE TB_POST
        SET
        POST_TITLE = #{postTitle},
        POST_CONTENT = #{postContent},
        LOCATION_TAG = #{locationTag},
        UPDATED_DATE = SYSTIMESTAMP,
        UPDATED_ID = #{updatedId}
        WHERE POST_ID = #{postId}
    </update>

    <!-- 관리자용 게시글 삭제 (USER_ID 조건 없음) -->
    <delete id="deletePost" parameterType="Long">
        DELETE FROM TB_POST
        WHERE POST_ID = #{postId}
    </delete>

    <!-- 게시글 ID로 이미지 삭제 -->
    <delete id="deleteImagesByPostId" parameterType="Long">
        DELETE FROM TB_POST_IMAGE
        WHERE POST_ID = #{postId}
    </delete>

    <!-- 댓글 관련 -->
    <select id="selectAllComments" resultMap="commentMap">
        SELECT
        c.*,
        u.USER_NICKNAME AS USER_NICKNAME
        FROM TB_COMMENT c
        LEFT JOIN TB_USER u ON c.USER_ID = u.USER_ID
        ORDER BY c.COMMENT_ID DESC
        OFFSET #{pageable.offset} ROWS FETCH NEXT #{pageable.pageSize} ROWS ONLY
    </select>

    <select id="countAllComments" resultType="int">
        SELECT COUNT(*)
        FROM TB_COMMENT
    </select>

    <delete id="deleteComment">
        DELETE FROM TB_COMMENT
        WHERE COMMENT_ID = #{commentId}
    </delete>

    <!-- 리뷰 관련 -->
    <select id="selectAllReviews" resultMap="reviewMap">
        SELECT
        rv.*,
        u.USER_NICKNAME AS USER_NICKNAME
        FROM TB_REVIEW rv
        LEFT JOIN TB_USER u ON rv.USER_ID = u.USER_ID
        ORDER BY rv.REVIEW_ID DESC
        OFFSET #{pageable.offset} ROWS FETCH NEXT #{pageable.pageSize} ROWS ONLY
    </select>

    <select id="countAllReviews" resultType="int">
        SELECT COUNT(*)
        FROM TB_REVIEW
    </select>

    <delete id="deleteReview">
        DELETE FROM TB_REVIEW
        WHERE REVIEW_ID = #{reviewId}
    </delete>

    <!-- 신고 관련 -->
    <select id="selectAllReports" resultMap="reportMap">
        SELECT
        r.REPORT_ID,
        r.REPORTER_ID,
        r.TARGET_ID,
        r.REPORT_TYPE,
        r.REPORT_REASON,
        r.STATUS,
        r.CREATED_DATE,
        ru.USER_NICKNAME AS REPORTER_NICKNAME,
        CASE
        WHEN r.REPORT_TYPE = 'post' THEN p.POST_TITLE
        ELSE NULL
        END AS POST_TITLE,
        CASE
        WHEN r.REPORT_TYPE = 'comment' THEN c.CONTENT
        ELSE NULL
        END AS COMMENT_CONTENT,
        CASE
        WHEN r.REPORT_TYPE = 'review' THEN rv.REVIEW_CONTENT
        ELSE NULL
        END AS REVIEW_CONTENT,
        CASE r.REPORT_TYPE
        WHEN 'post' THEN p.USER_ID
        WHEN 'comment' THEN c.USER_ID
        WHEN 'review' THEN rv.USER_ID
        END AS TARGET_USER_ID,
        CASE r.REPORT_TYPE
        WHEN 'post' THEN tu.USER_NICKNAME
        WHEN 'comment' THEN tu.USER_NICKNAME
        WHEN 'review' THEN tu.USER_NICKNAME
        END AS TARGET_USER_NICKNAME
        FROM TB_REPORT r
        LEFT JOIN TB_USER ru ON r.REPORTER_ID = ru.USER_ID
        LEFT JOIN TB_POST p ON r.REPORT_TYPE = 'post' AND r.TARGET_ID = p.POST_ID
        LEFT JOIN TB_COMMENT c ON r.REPORT_TYPE = 'comment' AND r.TARGET_ID = c.COMMENT_ID
        LEFT JOIN TB_REVIEW rv ON r.REPORT_TYPE = 'review' AND r.TARGET_ID = rv.REVIEW_ID
        LEFT JOIN TB_USER tu ON (r.REPORT_TYPE = 'post' AND p.USER_ID = tu.USER_ID) OR
        (r.REPORT_TYPE = 'comment' AND c.USER_ID = tu.USER_ID) OR
        (r.REPORT_TYPE = 'review' AND rv.USER_ID = tu.USER_ID)
        ORDER BY r.CREATED_DATE DESC
        OFFSET #{pageable.offset} ROWS FETCH NEXT #{pageable.pageSize} ROWS ONLY
    </select>

    <select id="countAllReports" resultType="int">
        SELECT COUNT(*)
        FROM TB_REPORT
    </select>

    <!-- 단일 신고 내역 조회 -->
    <select id="getReportById" resultMap="reportMap">
        SELECT
        r.REPORT_ID,
        r.REPORTER_ID,
        r.TARGET_ID,
        r.REPORT_TYPE,
        r.REPORT_REASON,
        r.STATUS,
        r.CREATED_DATE,
        ru.USER_NICKNAME AS REPORTER_NICKNAME,
        CASE
        WHEN r.REPORT_TYPE = 'post' THEN p.POST_TITLE
        ELSE NULL
        END AS POST_TITLE,
        CASE
        WHEN r.REPORT_TYPE = 'comment' THEN c.CONTENT
        ELSE NULL
        END AS COMMENT_CONTENT,
        CASE
        WHEN r.REPORT_TYPE = 'review' THEN rv.REVIEW_CONTENT
        ELSE NULL
        END AS REVIEW_CONTENT,
        CASE r.REPORT_TYPE
        WHEN 'post' THEN p.USER_ID
        WHEN 'comment' THEN c.USER_ID
        WHEN 'review' THEN rv.USER_ID
        END AS TARGET_USER_ID,
        CASE r.REPORT_TYPE
        WHEN 'post' THEN tu.USER_NICKNAME
        WHEN 'comment' THEN tu.USER_NICKNAME
        WHEN 'review' THEN tu.USER_NICKNAME
        END AS TARGET_USER_NICKNAME
        FROM TB_REPORT r
        LEFT JOIN TB_USER ru ON r.REPORTER_ID = ru.USER_ID
        LEFT JOIN TB_POST p ON r.REPORT_TYPE = 'post' AND r.TARGET_ID = p.POST_ID
        LEFT JOIN TB_COMMENT c ON r.REPORT_TYPE = 'comment' AND r.TARGET_ID = c.COMMENT_ID
        LEFT JOIN TB_REVIEW rv ON r.REPORT_TYPE = 'review' AND r.TARGET_ID = rv.REVIEW_ID
        LEFT JOIN TB_USER tu ON (r.REPORT_TYPE = 'post' AND p.USER_ID = tu.USER_ID) OR
        (r.REPORT_TYPE = 'comment' AND c.USER_ID = tu.USER_ID) OR
        (r.REPORT_TYPE = 'review' AND rv.USER_ID = tu.USER_ID)
        WHERE r.REPORT_ID = #{reportId}
    </select>

    <update id="updateReportStatus">
        UPDATE TB_REPORT
        SET
        STATUS = #{status},
        UPDATED_DATE = SYSTIMESTAMP
        WHERE REPORT_ID = #{reportId}
    </update>

    <delete id="deleteAllPostsByUserId">
        DELETE FROM TB_POST
        WHERE USER_ID = #{userId}
    </delete>

    <delete id="deleteAllCommentsByUserId">
        DELETE FROM TB_COMMENT
        WHERE USER_ID = #{userId}
    </delete>

    <delete id="deleteAllReportsByUserId">
        DELETE FROM TB_REPORT
        WHERE REPORTER_ID = #{userId} OR TARGET_ID = #{userId}
    </delete>

    <delete id="deleteAllReviewsByUserId">
        DELETE FROM TB_REVIEW
        WHERE USER_ID = #{userId}
    </delete>

    <select id="findRestaurantById" parameterType="java.lang.Long" resultMap="restaurantMap">
        SELECT
        R.RESTAURANT_ID,
        R.RESTAURANT_NAME,
        R.ADDR_SIDO,
        R.ADDR_SIGUNGU,
        R.ADDR_DONG,
        R.ADDR_DETAIL,
        R.PHONE_NUMBER,
        R.RESTAURANT_CATEGORY,
        R.RESTAURANT_LAT,
        R.RESTAURANT_LON,
        R.OPEN_HOUR,
        R.OPEN_MINUTE,
        R.CLOSE_HOUR,
        R.CLOSE_MINUTE,
        R.BREAK_START_HOUR,
        R.BREAK_START_MINUTE,
        R.BREAK_END_HOUR,
        R.BREAK_END_MINUTE,
        R.RESTAURANT_HOLIDAY,
        R.PARKING_INFO,
        R.CREATED_DATE,
        R.CREATED_ID,
        R.UPDATED_DATE,
        R.UPDATED_ID,
        (SELECT AVG(TR.REVIEW_RATING) FROM TB_REVIEW TR WHERE TR.RESTAURANT_ID = R.RESTAURANT_ID) AS averageRating,
        (SELECT COUNT(TR.REVIEW_ID) FROM TB_REVIEW TR WHERE TR.RESTAURANT_ID = R.RESTAURANT_ID) AS totalComments
        FROM TB_RESTAURANT R
        WHERE R.RESTAURANT_ID = #{restaurantId}
    </select>

</mapper>
