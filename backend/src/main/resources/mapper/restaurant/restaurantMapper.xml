<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.twogether.local7.restaurant.dao.RestaurantDAO">

    <resultMap id="restaurantResultMap" type="com.twogether.local7.restaurant.vo.RestaurantVO">
        <id property="restaurantId" column="RESTAURANT_ID"/>
        <result property="restaurantName" column="RESTAURANT_NAME"/>
        <result property="addrSido" column="ADDR_SIDO"/>
        <result property="addrSigungu" column="ADDR_SIGUNGU"/>
        <result property="addrDong" column="ADDR_DONG"/>
        <result property="addrDetail" column="ADDR_DETAIL"/>
        <result property="phoneNumber" column="PHONE_NUMBER"/>
        <result property="restaurantCategory" column="RESTAURANT_CATEGORY"/>
        <result property="restaurantLat" column="RESTAURANT_LAT"/>
        <result property="restaurantLon" column="RESTAURANT_LON"/>
        <result property="openHour" column="OPEN_HOUR"/>
        <result property="openMinute" column="OPEN_MINUTE"/>
        <result property="closeHour" column="CLOSE_HOUR"/>
        <result property="closeMinute" column="CLOSE_MINUTE"/>
        <result property="breakStartHour" column="BREAK_START_HOUR"/>
        <result property="breakStartMinute" column="BREAK_START_MINUTE"/>
        <result property="breakEndHour" column="BREAK_END_HOUR"/>
        <result property="breakEndMinute" column="BREAK_END_MINUTE"/>
        <result property="restaurantHoliday" column="RESTAURANT_HOLIDAY"/>
        <result property="parkingInfo" column="PARKING_INFO"/>
        <result property="createdDate" column="CREATED_DATE"/>
        <result property="createdId" column="CREATED_ID"/>
        <result property="updatedDate" column="UPDATED_DATE"/>
        <result property="updatedId" column="UPDATED_ID"/>
        <result property="totalComments" column="TOTAL_COMMENTS"/>
        <result property="averageRating" column="AVERAGE_RATING"/>
        <result property="kakaoPlaceId" column="KAKAO_PLACE_ID"/>
    </resultMap>

    <!-- 공통 SELECT 컬럼 목록 정의 (추가된 부분) -->
    <sql id="restaurantSelectColumns">
        T1.RESTAURANT_ID,
        T1.RESTAURANT_NAME,
        T1.ADDR_SIDO,
        T1.ADDR_SIGUNGU,
        T1.ADDR_DONG,
        T1.ADDR_DETAIL,
        T1.PHONE_NUMBER,
        T1.RESTAURANT_CATEGORY,
        T1.RESTAURANT_LAT,
        T1.RESTAURANT_LON,
        T1.OPEN_HOUR,
        T1.OPEN_MINUTE,
        T1.CLOSE_HOUR,
        T1.CLOSE_MINUTE,
        T1.BREAK_START_HOUR,
        T1.BREAK_START_MINUTE,
        T1.BREAK_END_HOUR,
        T1.BREAK_END_MINUTE,
        T1.RESTAURANT_HOLIDAY,
        T1.PARKING_INFO,
        T1.KAKAO_PLACE_ID,
        T1.CREATED_DATE,
        T1.CREATED_ID,
        T1.UPDATED_DATE,
        T1.UPDATED_ID
    </sql>

    <!-- 공통 GROUP BY 컬럼 목록 정의 (추가된 부분) -->
    <sql id="restaurantGroupByColumns">
        T1.RESTAURANT_ID,
        T1.RESTAURANT_NAME,
        T1.ADDR_SIDO,
        T1.ADDR_SIGUNGU,
        T1.ADDR_DONG,
        T1.ADDR_DETAIL,
        T1.PHONE_NUMBER,
        T1.RESTAURANT_CATEGORY,
        T1.RESTAURANT_LAT,
        T1.RESTAURANT_LON,
        T1.OPEN_HOUR,
        T1.OPEN_MINUTE,
        T1.CLOSE_HOUR,
        T1.CLOSE_MINUTE,
        T1.BREAK_START_HOUR,
        T1.BREAK_START_MINUTE,
        T1.BREAK_END_HOUR,
        T1.BREAK_END_MINUTE,
        T1.RESTAURANT_HOLIDAY,
        T1.PARKING_INFO,
        T1.KAKAO_PLACE_ID,
        T1.CREATED_DATE,
        T1.CREATED_ID,
        T1.UPDATED_DATE,
        T1.UPDATED_ID
    </sql>

    <select id="findAllRestaurants" resultMap="restaurantResultMap">
        SELECT
        T1.RESTAURANT_ID,
        T1.RESTAURANT_NAME,
        T1.ADDR_SIDO,
        T1.ADDR_SIGUNGU,
        T1.ADDR_DONG,
        T1.ADDR_DETAIL,
        T1.PHONE_NUMBER,
        T1.RESTAURANT_CATEGORY,
        T1.RESTAURANT_LAT,
        T1.RESTAURANT_LON,
        T1.OPEN_HOUR,
        T1.OPEN_MINUTE,
        T1.CLOSE_HOUR,
        T1.CLOSE_MINUTE,
        T1.BREAK_START_HOUR,
        T1.BREAK_START_MINUTE,
        T1.BREAK_END_HOUR,
        T1.BREAK_END_MINUTE,
        T1.RESTAURANT_HOLIDAY,
        T1.PARKING_INFO,
        T1.KAKAO_PLACE_ID,
        T1.CREATED_DATE,
        T1.CREATED_ID,
        T1.UPDATED_DATE,
        T1.UPDATED_ID,
        COUNT(T2.REVIEW_ID) AS TOTAL_COMMENTS,
        ROUND(NVL(AVG(T2.REVIEW_RATING), 0), 1) AS AVERAGE_RATING
        FROM TB_RESTAURANT T1
        LEFT JOIN TB_REVIEW T2 ON T1.RESTAURANT_ID = T2.RESTAURANT_ID
        GROUP BY
        T1.RESTAURANT_ID, T1.RESTAURANT_NAME, T1.ADDR_SIDO, T1.ADDR_SIGUNGU, T1.ADDR_DONG, T1.ADDR_DETAIL,
        T1.PHONE_NUMBER, T1.RESTAURANT_CATEGORY, T1.RESTAURANT_LAT, T1.RESTAURANT_LON, T1.OPEN_HOUR, T1.OPEN_MINUTE,
        T1.CLOSE_HOUR, T1.CLOSE_MINUTE, T1.BREAK_START_HOUR, T1.BREAK_START_MINUTE, T1.BREAK_END_HOUR,
        T1.BREAK_END_MINUTE, T1.RESTAURANT_HOLIDAY, T1.PARKING_INFO, T1.KAKAO_PLACE_ID, T1.CREATED_DATE,
        T1.CREATED_ID, T1.UPDATED_DATE, T1.UPDATED_ID
        ORDER BY T1.RESTAURANT_ID
    </select>

    <select id="findAllRestaurantsPaginated" parameterType="com.twogether.local7.pagintion.Pageable" resultMap="restaurantResultMap">
        SELECT
        <include refid="restaurantSelectColumns"/>, <!-- T1.* 대신 명시적 컬럼 사용 -->
        COUNT(T2.REVIEW_ID) AS TOTAL_COMMENTS,
        ROUND(NVL(AVG(T2.REVIEW_RATING), 0), 1) AS AVERAGE_RATING
        FROM TB_RESTAURANT T1
        LEFT JOIN TB_REVIEW T2 ON T1.RESTAURANT_ID = T2.RESTAURANT_ID
        GROUP BY
        <include refid="restaurantGroupByColumns"/> <!-- GROUP BY 컬럼도 명시적으로 포함 -->
        ORDER BY T1.RESTAURANT_ID
        OFFSET #{pageable.offset} ROWS FETCH NEXT #{pageable.pageSize} ROWS ONLY
    </select>

    <select id="countAllRestaurants" resultType="long">
        SELECT COUNT(*) FROM TB_RESTAURANT
    </select>

    <select id="findRestaurantsByCategory" parameterType="string" resultMap="restaurantResultMap">
        SELECT
        RESTAURANT_ID,
        RESTAURANT_NAME,
        ADDR_SIDO,
        ADDR_SIGUNGU,
        ADDR_DONG,
        ADDR_DETAIL,
        PHONE_NUMBER,
        RESTAURANT_CATEGORY,
        RESTAURANT_LAT,
        RESTAURANT_LON,
        OPEN_HOUR,
        OPEN_MINUTE,
        CLOSE_HOUR,
        CLOSE_MINUTE,
        BREAK_START_HOUR,
        BREAK_START_MINUTE,
        BREAK_END_HOUR,
        BREAK_END_MINUTE,
        RESTAURANT_HOLIDAY,
        PARKING_INFO,
        CREATED_DATE,
        CREATED_ID,
        UPDATED_DATE,
        UPDATED_ID
        FROM TB_RESTAURANT
        WHERE RESTAURANT_CATEGORY = #{category}
    </select>

    <select id="findRestaurantByName" resultMap="restaurantResultMap">
        SELECT *
        FROM TB_RESTAURANT
        WHERE RESTAURANT_NAME = #{restName}
        FETCH NEXT 1 ROWS ONLY
    </select>

    <select id="findRestaurantById" resultMap="restaurantResultMap">
        SELECT *
        FROM TB_RESTAURANT
        WHERE RESTAURANT_ID = #{restId}
        FETCH NEXT 1 ROWS ONLY
    </select>

    <!--  특정 지역에서 평균 평점이 높은 음식점 목록 조회 -->
    <select id="findTopRatedRestaurantsByRegion" resultMap="restaurantResultMap">
        SELECT
        TR.RESTAURANT_ID,
        TR.RESTAURANT_NAME,
        TR.ADDR_SIDO,
        TR.ADDR_SIGUNGU,
        TR.ADDR_DONG,
        TR.ADDR_DETAIL,
        TR.PHONE_NUMBER,
        TR.RESTAURANT_CATEGORY,
        TR.RESTAURANT_LAT,
        TR.RESTAURANT_LON,
        TR.OPEN_HOUR,
        TR.OPEN_MINUTE,
        TR.CLOSE_HOUR,
        TR.CLOSE_MINUTE,
        TR.BREAK_START_HOUR,
        TR.BREAK_START_MINUTE,
        TR.BREAK_END_HOUR,
        TR.BREAK_END_MINUTE,
        TR.RESTAURANT_HOLIDAY,
        TR.PARKING_INFO,
        TR.KAKAO_PLACE_ID,
        TR.CREATED_DATE,
        TR.CREATED_ID,
        TR.UPDATED_DATE,
        TR.UPDATED_ID,
        NVL(AVG(T_REV.REVIEW_RATING), 0) AS AVERAGE_RATING,
        COUNT(T_REV.REVIEW_ID) AS TOTAL_COMMENTS
        FROM TB_RESTAURANT TR
        LEFT JOIN TB_REVIEW T_REV ON TR.RESTAURANT_ID = T_REV.RESTAURANT_ID
        WHERE TR.ADDR_SIDO LIKE '%' || #{regionName} || '%' OR TR.ADDR_SIGUNGU LIKE '%' || #{regionName} || '%'
        GROUP BY
        TR.RESTAURANT_ID, TR.RESTAURANT_NAME, TR.ADDR_SIDO, TR.ADDR_SIGUNGU, TR.ADDR_DONG, TR.ADDR_DETAIL,
        TR.PHONE_NUMBER, TR.RESTAURANT_CATEGORY, TR.RESTAURANT_LAT, TR.RESTAURANT_LON, TR.OPEN_HOUR, TR.OPEN_MINUTE,
        TR.CLOSE_HOUR, TR.CLOSE_MINUTE, TR.BREAK_START_HOUR, TR.BREAK_START_MINUTE, TR.BREAK_END_HOUR,
        TR.BREAK_END_MINUTE, TR.RESTAURANT_HOLIDAY, TR.PARKING_INFO, TR.KAKAO_PLACE_ID, TR.CREATED_DATE,
        TR.CREATED_ID, TR.UPDATED_DATE, TR.UPDATED_ID
        ORDER BY AVERAGE_RATING DESC, TOTAL_COMMENTS DESC
        FETCH NEXT #{limit} ROWS ONLY
    </select>

    <!-- 음식점 평균 평점 및 리뷰 수 업데이트를 위한 쿼리 추가 -->
    <update id="updateRestaurantRatingAndComments">
        UPDATE TB_RESTAURANT
        SET
        AVERAGE_RATING = #{averageRating},
        TOTAL_COMMENTS = #{totalComments}
        WHERE RESTAURANT_ID = #{restaurantId}
    </update>

</mapper>
