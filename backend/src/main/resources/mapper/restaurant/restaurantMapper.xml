<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.twogether.local7.restaurant.dao.RestaurantDAO">

    <resultMap id="restaurantResultMap" type="com.twogether.local7.restaurant.vo.RestaurantVO">
        <id property="restaurantId" column="RESTAURANT_ID"/>
        <result property="restaurantName" column="RESTAURANT_NAME"/>
        <result property="addrSido" column="ADDR_SIDO"/>
        <result property="addrSigungu" column="ADDR_SIGUNGU"/>
        <result property="addrDong" column="ADDR_DONG"/>
        <result property="addrDetail" column="ADDR_DETAIL"/>
        <result property="phoneNumber" column="PHONE_NUMBER"/>
        <result property="restaurantCategory" column="RESTAURANT_CATEGORY"/>
        <result property="restaurantLat" column="RESTAURANT_LAT"/>
        <result property="restaurantLon" column="RESTAURANT_LON"/>
        <result property="openHour" column="OPEN_HOUR"/>
        <result property="openMinute" column="OPEN_MINUTE"/>
        <result property="closeHour" column="CLOSE_HOUR"/>
        <result property="closeMinute" column="CLOSE_MINUTE"/>
        <result property="breakStartHour" column="BREAK_START_HOUR"/>
        <result property="breakStartMinute" column="BREAK_START_MINUTE"/>
        <result property="breakEndHour" column="BREAK_END_HOUR"/>
        <result property="breakEndMinute" column="BREAK_END_MINUTE"/>
        <result property="restaurantHoliday" column="RESTAURANT_HOLIDAY"/>
        <result property="parkingInfo" column="PARKING_INFO"/>
        <result property="createdDate" column="CREATED_DATE"/>
        <result property="createdId" column="CREATED_ID"/>
        <result property="updatedDate" column="UPDATED_DATE"/>
        <result property="updatedId" column="UPDATED_ID"/>
        <result property="totalComments" column="TOTAL_COMMENTS"/>
        <result property="averageRating" column="AVERAGE_RATING"/>
        <result property="kakaoPlaceId" column="KAKAO_PLACE_ID"/>
    </resultMap>
    
    <select id="findAllRestaurants" resultMap="restaurantResultMap">
        SELECT
            RESTAURANT_ID,
            RESTAURANT_NAME,
            ADDR_SIDO,
            ADDR_SIGUNGU,
            ADDR_DONG,
            ADDR_DETAIL,
            PHONE_NUMBER,
            RESTAURANT_CATEGORY,
            RESTAURANT_LAT,
            RESTAURANT_LON,
            OPEN_HOUR,
            OPEN_MINUTE,
            CLOSE_HOUR,
            CLOSE_MINUTE,
            BREAK_START_HOUR,
            BREAK_START_MINUTE,
            BREAK_END_HOUR,
            BREAK_END_MINUTE,
            RESTAURANT_HOLIDAY,
            PARKING_INFO,
            KAKAO_PLACE_ID,
            CREATED_DATE,
            CREATED_ID,
            UPDATED_DATE,
            UPDATED_ID,
            AVERAGE_RATING,
            TOTAL_COMMENTS
        FROM TB_RESTAURANT
        ORDER BY RESTAURANT_ID
    </select>

    <select id="findAllRestaurantsPaginated" parameterType="com.twogether.local7.pagintion.Pageable" resultMap="restaurantResultMap">
        SELECT
            RESTAURANT_ID,
            RESTAURANT_NAME,
            ADDR_SIDO,
            ADDR_SIGUNGU,
            ADDR_DONG,
            ADDR_DETAIL,
            PHONE_NUMBER,
            RESTAURANT_CATEGORY,
            RESTAURANT_LAT,
            RESTAURANT_LON,
            OPEN_HOUR,
            OPEN_MINUTE,
            CLOSE_HOUR,
            CLOSE_MINUTE,
            BREAK_START_HOUR,
            BREAK_START_MINUTE,
            BREAK_END_HOUR,
            BREAK_END_MINUTE,
            RESTAURANT_HOLIDAY,
            PARKING_INFO,
            KAKAO_PLACE_ID,
            CREATED_DATE,
            CREATED_ID,
            UPDATED_DATE,
            UPDATED_ID,
            AVERAGE_RATING,
            TOTAL_COMMENTS
        FROM TB_RESTAURANT
        ORDER BY RESTAURANT_ID
        OFFSET #{pageable.offset} ROWS FETCH NEXT #{pageable.pageSize} ROWS ONLY
    </select>

    <select id="countAllRestaurants" resultType="long">
        SELECT COUNT(*) FROM TB_RESTAURANT
    </select>

    <select id="findRestaurantsByCategory" parameterType="string" resultMap="restaurantResultMap">
        SELECT
            RESTAURANT_ID,
            RESTAURANT_NAME,
            ADDR_SIDO,
            ADDR_SIGUNGU,
            ADDR_DONG,
            ADDR_DETAIL,
            PHONE_NUMBER,
            RESTAURANT_CATEGORY,
            RESTAURANT_LAT,
            RESTAURANT_LON,
            OPEN_HOUR,
            OPEN_MINUTE,
            CLOSE_HOUR,
            CLOSE_MINUTE,
            BREAK_START_HOUR,
            BREAK_START_MINUTE,
            BREAK_END_HOUR,
            BREAK_END_MINUTE,
            RESTAURANT_HOLIDAY,
            PARKING_INFO,
            CREATED_DATE,
            CREATED_ID,
            UPDATED_DATE,
            UPDATED_ID,
            AVERAGE_RATING,
            TOTAL_COMMENTS
        FROM TB_RESTAURANT
        WHERE RESTAURANT_CATEGORY = #{category}
    </select>

    <select id="findRestaurantByName" resultMap="restaurantResultMap">
        SELECT *
        FROM TB_RESTAURANT
        WHERE RESTAURANT_NAME = #{restName}
        FETCH NEXT 1 ROWS ONLY
    </select>

    <select id="findRestaurantById" resultMap="restaurantResultMap">
        SELECT *
        FROM TB_RESTAURANT
        WHERE RESTAURANT_ID = #{restId}
        FETCH NEXT 1 ROWS ONLY
    </select>

    <!--  특정 지역에서 평균 평점이 높은 음식점 목록 조회  -->
    <select id="findTopRatedRestaurantsByRegion" resultMap="restaurantResultMap">
        SELECT
            TR.RESTAURANT_ID,
            TR.RESTAURANT_NAME,
            TR.ADDR_SIDO,
            TR.ADDR_SIGUNGU,
            TR.ADDR_DONG,
            TR.ADDR_DETAIL,
            TR.PHONE_NUMBER,
            TR.RESTAURANT_CATEGORY,
            TR.RESTAURANT_LAT,
            TR.RESTAURANT_LON,
            TR.OPEN_HOUR,
            TR.OPEN_MINUTE,
            TR.CLOSE_HOUR,
            TR.CLOSE_MINUTE,
            TR.BREAK_START_HOUR,
            TR.BREAK_START_MINUTE,
            TR.BREAK_END_HOUR,
            TR.BREAK_END_MINUTE,
            TR.RESTAURANT_HOLIDAY,
            TR.PARKING_INFO,
            TR.KAKAO_PLACE_ID,
            TR.CREATED_DATE,
            TR.CREATED_ID,
            TR.UPDATED_DATE,
            TR.UPDATED_ID,
            NVL(AVG(T_REV.REVIEW_RATING), 0) AS AVERAGE_RATING,
            COUNT(T_REV.REVIEW_ID) AS TOTAL_COMMENTS
        FROM TB_RESTAURANT TR
        LEFT JOIN TB_REVIEW T_REV ON TR.RESTAURANT_ID = T_REV.RESTAURANT_ID
        WHERE TR.ADDR_SIDO LIKE '%' || #{regionName} || '%' OR TR.ADDR_SIGUNGU LIKE '%' || #{regionName} || '%'
        GROUP BY
            TR.RESTAURANT_ID, TR.RESTAURANT_NAME, TR.ADDR_SIDO, TR.ADDR_SIGUNGU, TR.ADDR_DONG, TR.ADDR_DETAIL,
            TR.PHONE_NUMBER, TR.RESTAURANT_CATEGORY, TR.RESTAURANT_LAT, TR.RESTAURANT_LON, TR.OPEN_HOUR, TR.OPEN_MINUTE,
            TR.CLOSE_HOUR, TR.CLOSE_MINUTE, TR.BREAK_START_HOUR, TR.BREAK_START_MINUTE, TR.BREAK_END_HOUR,
            TR.BREAK_END_MINUTE, TR.RESTAURANT_HOLIDAY, TR.PARKING_INFO, TR.KAKAO_PLACE_ID, TR.CREATED_DATE,
            TR.CREATED_ID, TR.UPDATED_DATE, TR.UPDATED_ID
        ORDER BY AVERAGE_RATING DESC, TOTAL_COMMENTS DESC
        FETCH NEXT #{limit} ROWS ONLY
    </select>

    <!-- 음식점 평균 평점 및 리뷰 수 업데이트를 위한 쿼리 -->
    <update id="updateRestaurantRatingAndComments">
        UPDATE TB_RESTAURANT
        SET
        AVERAGE_RATING = #{averageRating},
        TOTAL_COMMENTS = #{totalComments}
        WHERE RESTAURANT_ID = #{restaurantId}
    </update>

</mapper>
