CREATE TABLE LIKES (
    LIKE_ID NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    USER_ID NUMBER NOT NULL,
    POST_ID NUMBER,
    RESTAURANT_ID NUMBER,
    CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE,
    FOREIGN KEY (POST_ID) REFERENCES POSTS(POST_ID) ON DELETE CASCADE,
    FOREIGN KEY (RESTAURANT_ID) REFERENCES RESTAURANTS(RESTAURANT_ID) ON DELETE CASCADE,
    CONSTRAINT UK_LIKES_USER_POST UNIQUE (USER_ID, POST_ID),
    CONSTRAINT UK_LIKES_USER_RESTAURANT UNIQUE (USER_ID, RESTAURANT_ID),
    CONSTRAINT CK_LIKES_TARGET CHECK (POST_ID IS NOT NULL OR RESTAURANT_ID IS NOT NULL)
);

CREATE INDEX IDX_LIKES_USER_ID ON LIKES (USER_ID);
CREATE INDEX IDX_LIKES_POST_ID ON LIKES (POST_ID);
CREATE INDEX IDX_LIKES_RESTAURANT_ID ON LIKES (RESTAURANT_ID);

-- 5. 좋아요 테이블 (TB_LIKES) 주석 추가
COMMENT ON TABLE TB_LIKES IS '사용자가 게시글 또는 맛집에 누른 좋아요 기록을 저장하는 테이블';
COMMENT ON COLUMN TB_LIKES.LIKE_ID IS '좋아요 고유 ID (기본 키)';
COMMENT ON COLUMN TB_LIKES.USER_ID IS '좋아요를 누른 사용자 ID (TB_USERS 참조)';
COMMENT ON COLUMN TB_LIKES.POST_ID IS '좋아요 대상 게시글 ID (TB_POSTS 참조, NULL 허용)';
COMMENT ON COLUMN TB_LIKES.RESTAURANT_ID IS '좋아요 대상 맛집 ID (TB_RESTAURANTS 참조, NULL 허용)';
COMMENT ON COLUMN TB_LIKES.CREATED_AT IS '좋아요 누른 일시';