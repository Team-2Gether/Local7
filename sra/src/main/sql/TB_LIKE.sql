CREATE TABLE TB_LIKE (
    LIKE_ID            NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    USER_ID            NUMBER NOT NULL,
    POST_ID            NUMBER,
    RESTAURANT_ID      NUMBER,
    LIKE_CREATED_AT    TIMESTAMP DEFAULT SYSTIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES TB_USER(USER_ID) ON DELETE CASCADE,
    FOREIGN KEY (POST_ID) REFERENCES TB_POST(POST_ID) ON DELETE CASCADE,
    FOREIGN KEY (RESTAURANT_ID) REFERENCES TB_RESTAURANT(RESTAURANT_ID) ON DELETE CASCADE,
    CONSTRAINT UK_LIKE_USER_POST UNIQUE (USER_ID, POST_ID),
    CONSTRAINT UK_LIKE_USER_RESTAURANT UNIQUE (USER_ID, RESTAURANT_ID),
    CONSTRAINT CK_LIKE_TARGET CHECK (POST_ID IS NOT NULL OR RESTAURANT_ID IS NOT NULL)
);

CREATE INDEX IDX_LIKE_USER_ID ON TB_LIKE (USER_ID);
CREATE INDEX IDX_LIKE_POST_ID ON TB_LIKE (POST_ID);
CREATE INDEX IDX_LIKE_RESTAURANT_ID ON TB_LIKE (RESTAURANT_ID);

-- 5. 좋아요 테이블 (TB_LIKE) 주석 추가
COMMENT ON TABLE TB_LIKE IS '사용자가 게시글 또는 맛집에 누른 좋아요 기록을 저장하는 테이블';
COMMENT ON COLUMN TB_LIKE.LIKE_ID IS '좋아요 고유 ID (기본 키)';
COMMENT ON COLUMN TB_LIKE.USER_ID IS '좋아요를 누른 사용자 ID (TB_USER 참조)';
COMMENT ON COLUMN TB_LIKE.POST_ID IS '좋아요 대상 게시글 ID (TB_POST 참조, NULL 허용)';
COMMENT ON COLUMN TB_LIKE.RESTAURANT_ID IS '좋아요 대상 맛집 ID (TB_RESTAURANT 참조, NULL 허용)';
COMMENT ON COLUMN TB_LIKE.LIKE_CREATED_AT IS '좋아요 누른 일시';