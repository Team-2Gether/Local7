-- 유저
CREATE TABLE TB_USER (
    USER_ID               NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    USER_LOGIN_ID         VARCHAR(50) NOT NULL UNIQUE,
    USER_USERNAME         VARCHAR2(50) NOT NULL UNIQUE,
    USER_PASSWORD         VARCHAR2(255) NOT NULL,
    USER_EMAIL            VARCHAR2(100) UNIQUE,
    USER_NICKNAME         VARCHAR2(50) NOT NULL UNIQUE,
    USER_PROFILE_IMAGE_URL VARCHAR2(500),
    USER_BIO              VARCHAR2(200),
    USER_CREATED_AT       TIMESTAMP DEFAULT SYSTIMESTAMP,
    USER_UPDATED_AT       TIMESTAMP DEFAULT SYSTIMESTAMP
);

ALTER TABLE TB_USER ADD (
    RULE_ID NUMBER DEFAULT 1 NOT NULL
);

COMMENT ON TABLE TB_USER IS '사용자 계정 정보를 저장하는 테이블';
COMMENT ON COLUMN TB_USER.USER_ID IS '사용자 고유 ID (기본 키)';
COMMENT ON COLUMN TB_USER.USER_LOGIN_ID IS '사용자 로그인 계정명 (고유)';
COMMENT ON COLUMN TB_USER.USER_USERNAME IS '사용자 이름';
COMMENT ON COLUMN TB_USER.USER_PASSWORD IS '사용자 비밀번호 (해시값)';
COMMENT ON COLUMN TB_USER.USER_EMAIL IS '사용자 이메일 주소 (고유)';
COMMENT ON COLUMN TB_USER.USER_NICKNAME IS '사용자 닉네임 (고유)';
COMMENT ON COLUMN TB_USER.USER_PROFILE_IMAGE_URL IS '프로필 이미지 URL';
COMMENT ON COLUMN TB_USER.USER_BIO IS '사용자 자기소개';
COMMENT ON COLUMN TB_USER.USER_CREATED_AT IS '계정 생성일시';
COMMENT ON COLUMN TB_USER.USER_UPDATED_AT IS '계정 정보 수정일시';

-- 식당
create table tb_restaurant
(
    restaurant_id              number        generated by default as identity (start with 1 increment by 1 nocycle nocache),
    restaurant_name            varchar2(100) not null,
    restaurant_address         varchar2(200) not null,
    restaurant_phone_number    varchar2(20),
    restaurant_category        varchar2(50),
    restaurant_latitude        number(10,7),
    restaurant_longitude       number(10,7),
    restaurant_open_hours      varchar2(200),
    restaurant_break_time      varchar2(100),
    restaurant_holiday         varchar2(100),
    restaurant_parking_info    varchar2(200),
    restaurant_average_rating  number(2,1)   default 0.0,
    restaurant_review_count    number        default 0,
    created_date               date          default sysdate not null,
    created_id                 varchar2(100) not null,
    updated_date               date          default sysdate not null,
    updated_id                 varchar2(100) not null,
    constraint tb_restaurant_pk primary key(restaurant_id)
);

comment on column tb_restaurant.restaurant_id is '맛집 고유 ID (기본 키)';
comment on column tb_restaurant.restaurant_name is '맛집 이름';
comment on column tb_restaurant.restaurant_address is '맛집 주소';
comment on column tb_restaurant.restaurant_phone_number is '맛집 전화번호';
comment on column tb_restaurant.restaurant_category is '음식 카테고리 (예: 한식, 중식, 양식, 카페)';
comment on column tb_restaurant.restaurant_latitude is '맛집 위치 위도';
comment on column tb_restaurant.restaurant_longitude is '맛집 위치 경도';
comment on column tb_restaurant.restaurant_open_hours is '영업 시간 정보';
comment on column tb_restaurant.restaurant_break_time is '브레이크 타임 정보';
comment on column tb_restaurant.restaurant_holiday is '휴무일 정보';
comment on column tb_restaurant.restaurant_parking_info is '주차 정보';
comment on column tb_restaurant.restaurant_average_rating is '맛집 평균 별점';
comment on column tb_restaurant.restaurant_review_count is '맛집 리뷰 개수';
comment on column tb_restaurant.created_date is '맛집 정보 생성일자';
comment on column tb_restaurant.created_id is '맛집 정보 생성자 ID';
comment on column tb_restaurant.updated_date is '맛집 정보 수정일자';
comment on column tb_restaurant.updated_id is '맛집 정보 수정자 ID';
comment on table tb_restaurant is '7번국도 지역 맛집 정보를 저장하는 테이블';

create index idx_tb_restaurant_address on tb_restaurant (restaurant_address);
create index idx_tb_restaurant_category on tb_restaurant (restaurant_category);
create index idx_tb_restaurant_name on tb_restaurant (restaurant_name);

-- 리뷰
CREATE TABLE TB_REVIEW (
    REVIEW_ID            NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    USER_ID      NUMBER NOT NULL,
    RESTAURANT_ID        NUMBER NOT NULL,
    REVIEW_RATING        NUMBER(2, 1) NOT NULL,
    REVIEW_CONTENT       CLOB NOT NULL,
    REVIEW_AI_SUMMARY    CLOB,
    REVIEW_AI_KEYWORDS   VARCHAR2(500),
    REVIEW_CREATED_AT    TIMESTAMP DEFAULT SYSTIMESTAMP,
    REVIEW_UPDATED_AT    TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT CK_REVIEW_RATING CHECK (REVIEW_RATING >= 0.5 AND REVIEW_RATING <= 5.0)
);

CREATE INDEX IDX_REVIEW_USER_ID ON TB_REVIEW (USER_ID);
CREATE INDEX IDX_REVIEW_RESTAURANT_ID ON TB_REVIEW (RESTAURANT_ID);

COMMENT ON TABLE TB_REVIEW IS '특정 맛집에 대한 상세 리뷰 및 AI 분석 결과를 저장하는 테이블';
COMMENT ON COLUMN TB_REVIEW.REVIEW_ID IS '리뷰 고유 ID (기본 키)';
COMMENT ON COLUMN TB_REVIEW.USER_ID IS '리뷰 작성자 ID (TB_USER 테이블의 USER_ID 참조)';
COMMENT ON COLUMN TB_REVIEW.RESTAURANT_ID IS '리뷰 대상 맛집 ID (TB_RESTAURANT 테이블의 RESTAURANT_ID 참조)';
COMMENT ON COLUMN TB_REVIEW.REVIEW_RATING IS '리뷰 별점 (0.5 ~ 5.0)';
COMMENT ON COLUMN TB_REVIEW.REVIEW_CONTENT IS '리뷰 내용 원문';
COMMENT ON COLUMN TB_REVIEW.REVIEW_AI_SUMMARY IS 'AI가 요약한 리뷰 내용';
COMMENT ON COLUMN TB_REVIEW.REVIEW_AI_KEYWORDS IS 'AI가 추출한 핵심 키워드들 (콤마 구분)';
COMMENT ON COLUMN TB_REVIEW.REVIEW_CREATED_AT IS '리뷰 생성일시';
COMMENT ON COLUMN TB_REVIEW.REVIEW_UPDATED_AT IS '리뷰 수정일시';

-- 게시물
CREATE TABLE TB_POST (
    POST_ID            NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    USER_ID    NUMBER NOT NULL,
    RESTAURANT_ID NUMBER NOT NULL,
    POST_CONTENT       CLOB,
    POST_IMAGE_URLS    VARCHAR2(1000),
    POST_LOCATION_TAG  VARCHAR2(100),
    POST_HASHTAGS      VARCHAR2(500),
    POST_LIKE_COUNT    NUMBER DEFAULT 0,
    POST_COMMENT_COUNT NUMBER DEFAULT 0,
    POST_CREATED_AT    TIMESTAMP DEFAULT SYSTIMESTAMP,
    POST_UPDATED_AT    TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE INDEX IDX_POST_USER_ID ON TB_POST (TB_USER_USER_ID);
CREATE INDEX IDX_POST_RESTAURANT_ID ON TB_POST (TB_RESTAURANT_RESTAURANT_ID);

COMMENT ON TABLE TB_POST IS '사용자들이 올리는 맛집 방문 후기 게시글 정보를 저장하는 테이블';
COMMENT ON COLUMN TB_POST.POST_ID IS '게시글 고유 ID (기본 키)';
COMMENT ON COLUMN TB_POST.USER_ID IS '게시글 작성자 ID (TB_USER 테이블의 USER_ID 참조)';
COMMENT ON COLUMN TB_POST.RESTAURANT_ID IS '관련 맛집 ID (TB_RESTAURANT 테이블의 RESTAURANT_ID 참조)';
COMMENT ON COLUMN TB_POST.POST_CONTENT IS '게시글 내용';
COMMENT ON COLUMN TB_POST.POST_IMAGE_URLS IS '게시글에 첨부된 이미지 URL들 (콤마 또는 JSON)';
COMMENT ON COLUMN TB_POST.POST_LOCATION_TAG IS '위치 태그 (예: #강릉)';
COMMENT ON COLUMN TB_POST.POST_HASHTAGS IS '게시글 해시태그들 (콤마 또는 JSON)';
COMMENT ON COLUMN TB_POST.POST_LIKE_COUNT IS '게시글 좋아요 수';
COMMENT ON COLUMN TB_POST.POST_COMMENT_COUNT IS '게시글 댓글 수';
COMMENT ON COLUMN TB_POST.POST_CREATED_AT IS '게시글 생성일시';
COMMENT ON COLUMN TB_POST.POST_UPDATED_AT IS '게시글 수정일시';


-- Like
CREATE TABLE TB_LIKE (
    LIKE_ID    NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    USER_ID    NUMBER NOT NULL,
    POST_ID    NUMBER,
    RESTAURANT_ID NUMBER,
    LIKE_CREATED_AT    TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT UK_LIKE_USER_POST UNIQUE (USER_ID, POST_ID),
    CONSTRAINT UK_LIKE_USER_RESTAURANT UNIQUE (USER_ID, RESTAURANT_ID),
    CONSTRAINT CK_LIKE_TARGET CHECK (POST_ID IS NOT NULL OR RESTAURANT_ID IS NOT NULL)
);

CREATE INDEX IDX_LIKE_USER_ID ON TB_LIKE (USER_ID);
CREATE INDEX IDX_LIKE_POST_ID ON TB_LIKE (POST_ID);
CREATE INDEX IDX_LIKE_RESTAURANT_ID ON TB_LIKE (RESTAURANT_ID);

COMMENT ON TABLE TB_LIKE IS '사용자가 게시글 또는 맛집에 누른 좋아요 기록을 저장하는 테이블';
COMMENT ON COLUMN TB_LIKE.LIKE_ID IS '좋아요 고유 ID (기본 키)';
COMMENT ON COLUMN TB_LIKE.USER_ID IS '좋아요를 누른 사용자 ID (TB_USER 테이블의 USER_ID 참조)';
COMMENT ON COLUMN TB_LIKE.POST_ID IS '좋아요 대상 게시글 ID (TB_POST 테이블의 POST_ID 참조, NULL 허용)';
COMMENT ON COLUMN TB_LIKE.RESTAURANT_ID IS '좋아요 대상 맛집 ID (TB_RESTAURANT 테이블의 RESTAURANT_ID 참조, NULL 허용)';
COMMENT ON COLUMN TB_LIKE.LIKE_CREATED_AT IS '좋아요 누른 일시';

-- 팔로우
CREATE TABLE TB_FOLLOW (
    FOLLOWER_ID      NUMBER NOT NULL,
    FOLLOWING_ID     NUMBER NOT NULL,
    FOLLOW_CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP,
    PRIMARY KEY (FOLLOWER_ID, FOLLOWING_ID),
    CONSTRAINT CK_FOLLOW_SELF_FOLLOW CHECK (FOLLOWER_ID != FOLLOWING_ID)
);

COMMENT ON TABLE TB_FOLLOW IS '사용자 간의 팔로우 관계를 저장하는 테이블';
COMMENT ON COLUMN TB_FOLLOW.FOLLOWER_ID IS '팔로우를 하는 사용자 ID (TB_USER 테이블의 USER_ID 참조)';
COMMENT ON COLUMN TB_FOLLOW.FOLLOWING_ID IS '팔로우를 받는 사용자 ID (TB_USER 테이블의 USER_ID 참조)';
COMMENT ON COLUMN TB_FOLLOW.FOLLOW_CREATED_AT IS '팔로우 관계 생성일시';

-- 댓글
CREATE TABLE TB_COMMENT (
    COMMENT_ID          NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    POST_ID     NUMBER NOT NULL,
    USER_ID     NUMBER NOT NULL,
    PARENT_COMMENT_ID   NUMBER,
    COMMENT_CONTENT     VARCHAR2(500) NOT NULL,
    COMMENT_CREATED_AT  TIMESTAMP DEFAULT SYSTIMESTAMP,
    COMMENT_UPDATED_AT  TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE INDEX IDX_COMMENT_POST_ID ON TB_COMMENT (POST_ID);
CREATE INDEX IDX_COMMENT_USER_ID ON TB_COMMENT (USER_ID);
CREATE INDEX IDX_COMMENT_PARENT_ID ON TB_COMMENT (PARENT_COMMENT_ID);

COMMENT ON TABLE TB_COMMENT IS '게시글에 대한 댓글 정보를 저장하는 테이블';
COMMENT ON COLUMN TB_COMMENT.COMMENT_ID IS '댓글 고유 ID (기본 키)';
COMMENT ON COLUMN TB_COMMENT.POST_ID IS '댓글이 달린 게시글 ID (TB_POST 테이블의 POST_ID 참조)';
COMMENT ON COLUMN TB_COMMENT.USER_ID IS '댓글 작성자 ID (TB_USER 테이블의 USER_ID 참조)';
COMMENT ON COLUMN TB_COMMENT.PARENT_COMMENT_ID IS '부모 댓글 ID (대댓글인 경우, TB_COMMENT 테이블의 COMMENT_ID 참조)';
COMMENT ON COLUMN TB_COMMENT.COMMENT_CONTENT IS '댓글 내용';
COMMENT ON COLUMN TB_COMMENT.COMMENT_CREATED_AT IS '댓글 생성일시';
COMMENT ON COLUMN TB_COMMENT.COMMENT_UPDATED_AT IS '댓글 수정일시';

-- REUL(권한)
CREATE TABLE TB_RULE (
    RULE_ID   NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
    RULE_NAME VARCHAR2(50) NOT NULL UNIQUE,
    CONSTRAINT TB_RULE_PK PRIMARY KEY(RULE_ID)
);

COMMENT ON TABLE TB_RULE IS '사용자 권한(Rule) 정보를 저장하는 테이블';
COMMENT ON COLUMN TB_RULE.RULE_ID IS '권한 고유 ID (기본 키)';
COMMENT ON COLUMN TB_RULE.RULE_NAME IS '권한명 (예: user, admin)';

INSERT INTO TB_RULE (RULE_NAME) VALUES ('user');
INSERT INTO TB_RULE (RULE_NAME) VALUES ('admin');


-- 테이블 삭제
DROP TABLE TB_COMMENT PURGE;
DROP TABLE TB_FOLLOW PURGE;
DROP TABLE TB_LIKE PURGE;
DROP TABLE TB_POST PURGE;
DROP TABLE tb_restaurant PURGE;
DROP TABLE TB_REVIEW PURGE;
DROP TABLE TB_RULE PURGE;
DROP TABLE TB_USER PURGE;
